#!/usr/bin/env bash

set -e

OutputDir="$1"
SysName=$(uname -s)
ProcessorArch=$(uname -m)

MkTempOptions=
if [[ $SysName ==  Darwin* ]] ; then
	OutputPlatform=OSX
	BuildPlatform=OSX10.7
	StripCommand="strip -u -r"
elif [[ $SysName ==  Linux* ]] ; then
	MkTempOptions="-t"
	OutputPlatform=Linux/Ubuntu1604
	BuildPlatform=Linux2.6
	StripCommand="strip --strip-unneeded"
else
	echo "Couldn't detect system"
	exit 1
fi

if [[ $ProcessorArch == i*86 ]] ; then
	BuildArch=x86
elif [[ $ProcessorArch == x86_64 ]] ; then
	BuildArch=x64
else
	echo $ProcessorArch is not a recognized architecture
	exit 1
fi

MalterlibRoot="${MalterlibRoot:-/Development/Malterlib/Dev}"
OpenSSLRoot="${OpenSSLRoot:-$MalterlibRoot/SDK/OpenSSL}"

TempPkgConfigDir="`mktemp -d $MkTempOptions`"
OpenSSLPkgConfig="$TempPkgConfigDir/openssl.pc"

cat << EOF > "$OpenSSLPkgConfig"
prefix=/usr
exec_prefix=\${prefix}
libdir=$OpenSSLRoot/build/lib/$BuildPlatform/clang_libc++/$BuildArch/Release
includedir=$OpenSSLRoot/build/include/$BuildPlatform/$BuildArch

Name: OpenSSL
Version: 0.0
Description: Secure Sockets Layer and cryptography libraries and tools
Requires:
Libs: -L\${libdir} -lssl -lcrypto -ldl
Cflags: -I\${includedir}
EOF

export PKG_CONFIG_PATH="$TempPkgConfigDir:$PKG_CONFIG_PATH"
export CGO_LDFLAGS="-L$OpenSSLRoot/build/lib/$BuildPlatform/clang_libc++/$BuildArch/Release"
export CGO_CFLAGS="-I$OpenSSLRoot/build/include/$BuildPlatform/$BuildArch"

./build.sh ssl

if [[ "$OutputDir" != "" ]]; then
	OutputBinDir="$OutputDir/$OutputPlatform/mongo/bin/"
	mkdir -p $OutputBinDir

	Tools="mongodump bsondump mongoexport mongoimport mongorestore mongotop"
	for Tool in $Tools ; do
		cp -f bin/$Tool $OutputBinDir
		$StripCommand "$OutputBinDir/$Tool"
	done
fi
